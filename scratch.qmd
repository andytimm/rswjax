


```{python}
import rswjax
```


```{python}
import pandas as pd
import numpy as np
from numpy import linalg
import rswjax

np.random.seed(5)
n = 1000
age = np.random.randint(20, 30, size=n) * 1.
sex = np.random.choice([0., 1.], p=[.4, .6], size=n)
height = np.random.normal(5, 1, size=n)

type(height)

df = pd.DataFrame({
    "age": age,
    "sex": sex,
    "height": height
})

funs = [
    lambda x: x.age,
    lambda x: x.sex == 0 if not np.isnan(x.sex) else np.nan,
    lambda x: x.height
]

losses = [rswjax.EqualityLoss(25), rswjax.EqualityLoss(.5),
          rswjax.EqualityLoss(5.3)]
regularizer = rswjax.EntropyRegularizer()
w, out, sol = rswjax.rsw(df, funs, losses, regularizer, .01, eps_abs=1e-8, verbose = True)

out

```

```{python}
import pandas as pd
import numpy as np
from numpy import linalg
import rswjax

np.random.seed(5)
n = 5000
age = np.random.randint(20, 30, size=n) * 1.
sex = np.random.choice([0., 1.], p=[.4, .6], size=n)
height = np.random.normal(5, 1, size=n)

# Generate additional covariates
additional_covariates = {f"covariate_{i}": np.random.normal(0, 1, size=n) if i % 2 == 0 else np.random.choice([0., 1.], p=[.5, .5], size=n) for i in range(4, 21)}

# Update DataFrame
df = pd.DataFrame({
    "age": age,
    "sex": sex,
    "height": height,
    **additional_covariates
})


# Define losses with different random targets
losses = []
for col in df.columns:
    if df[col].nunique() == 2:  # Binary data
        # Random target between 0 and 1
        target = np.random.rand()
    else:  # Continuous data
        # Random target within a range close to the mean of the column
        mean_val = df[col].mean()
        target = np.random.uniform(mean_val * 0.8, mean_val * 1.2)
    
    losses.append(rswjax.EqualityLoss(target))

regularizer = rswjax.EntropyRegularizer()
w, out, sol = rswjax.rsw(df, None, losses, regularizer, .01, eps_abs=1e-8, verbose=True)

out
```

```{python}
import pandas as pd
import numpy as np
from numpy import linalg
import rswjax

np.random.seed(5)
n = 5000
age = np.random.randint(20, 30, size=n) * 1.
sex = np.random.choice([0., 1.], p=[.4, .6], size=n)
height = np.random.normal(5, 1, size=n)

# Generate additional covariates
additional_covariates = {f"covariate_{i}": np.random.normal(0, 1, size=n) if i % 2 == 0 else np.random.choice([0., 1.], p=[.5, .5], size=n) for i in range(4, 101)}

# Update DataFrame
df = pd.DataFrame({
    "age": age,
    "sex": sex,
    "height": height,
    **additional_covariates
})


# Define losses with different random targets
losses = []
for col in df.columns:
    if df[col].nunique() == 2: 
        # Random target between 0 and 1 - kinda harsh as a test case, but it does let it run
        target = np.random.rand()
    else:  # Continuous data
        # Random target within a range close to the mean of the column
        # - kinda harsh as a test case, but it does let it run
        mean_val = df[col].mean()
        target = np.random.uniform(mean_val * 0.8, mean_val * 1.2)
    
    losses.append(rswjax.EqualityLoss(target))

regularizer = rswjax.EntropyRegularizer()
w, out, sol = rswjax.rsw(df, None, losses, regularizer, .01, eps_abs=1e-8, verbose=True)

out
```

```{python}
out
```

```{python}
import pandas as pd
import numpy as np
from numpy import linalg
import rswjax

np.random.seed(5)
n = 1000
age = np.random.randint(20, 30, size=n) * 1.
sex = np.random.choice([0., 1.], p=[.4, .6], size=n)
height = np.random.normal(5, 1, size=n)

type(height)

df = pd.DataFrame({
    "age": age,
    "sex": sex,
    "height": height
})

funs = [
    lambda x: x.age,
    lambda x: x.sex == 0 if not np.isnan(x.sex) else np.nan,
    lambda x: x.height
]

array_of_inputs = np.array([25,.5,5.3])

losses = [rswjax.EqualityLoss(array_of_inputs.flatten())]
regularizer = rswjax.EntropyRegularizer()
w, out, sol = rswjax.rsw(df, funs, losses, regularizer, .01, eps_abs=1e-8, verbose = True)

out
```

```{python}
funs = [
        lambda x: x.age,
        lambda x: x.sex == 0 if not np.isnan(x.sex) else np.nan,
        lambda x: x.height
    ]
losses = [rswjax.LeastSquaresLoss(25), rswjax.LeastSquaresLoss(.5),
            rswjax.LeastSquaresLoss(5.3)]
regularizer = rswjax.BooleanRegularizer(100)
w, out, sol = rswjax.rsw(df, funs, losses, regularizer, 1., verbose=True)

out
```

```{python}
%timeit -n 100 rswjax.rsw(df, None, losses, regularizer, .01, eps_abs=1e-8, verbose = True)
```

```{python}
import cProfile
import pstats
import io
import rswjax
import pandas as pd
import numpy as np

np.random.seed(5)
n = 100000
age = np.random.randint(20, 30, size=n) * 1.
sex = np.random.choice([0., 1.], p=[.4, .6], size=n)
height = np.random.normal(5, 1, size=n)

df = pd.DataFrame({
    "age": age,
    "sex": sex,
    "height": height
})

funs = [
    lambda x: x.age,
    lambda x: x.sex == 0 if not np.isnan(x.sex) else np.nan,
    lambda x: x.height
]
losses = [rswjax.EqualityLoss(25), rswjax.EqualityLoss(.5),
        rswjax.EqualityLoss(5.3)]
regularizer = rswjax.EntropyRegularizer()

def profile_rswjax():
    w, out, sol = rswjax.rsw(df, None, losses, regularizer, .01,  eps_abs=1e-8,verbose=True)

    print(out)

pr = cProfile.Profile()
pr.enable()

profile_rswjax()

pr.disable()
s = io.StringIO()
ps = pstats.Stats(pr, stream=s).sort_stats('cumulative')
ps.print_stats()
print(s.getvalue())

# Optionally, save the stats for visualization
ps.dump_stats('profile.stats')

```


```{python}
import pandas as pd
import numpy as np
from numpy import linalg
import rswjax
```

```{python}
np.random.seed(5)
n = 10000
age = np.random.randint(20, 30, size=n) * 1.
sex = np.random.choice([0., 1.], p=[.4, .6], size=n)
height = np.random.normal(5, 1, size=n)

df = pd.DataFrame({
    "age": age,
    "sex": sex,
    "height": height
})

```

```{python}

# Real
print("\n\nExample 1, Max Entropy Weights")
funs = [
    lambda x: x.age,
    lambda x: x.sex == 0 if not np.isnan(x.sex) else np.nan,
    lambda x: x.height
]
losses = [rswjax.EqualityLoss(25), rswjax.EqualityLoss(.5),
          rswjax.EqualityLoss(5.3)]
regularizer = rswjax.EntropyRegularizer()
w, out, sol = rswjax.rsw(df, None, losses, regularizer, .0001,  eps_abs=1e-8)

out
```

```{python}

# Real
print("\n\nExample 2, Max Entropy Weights")
funs = [
    lambda x: x.age,
    lambda x: x.sex == 0 if not np.isnan(x.sex) else np.nan,
    lambda x: x.height
]
losses = [rsw.EqualityLoss(np.array([25,.5,5.3]))]
regularizer = rsw.EntropyRegularizer()
w, out, sol = rsw.rsw(df, None, losses, regularizer, .0001,  eps_abs=1e-8,verbose=True)

out
```

```{python}
import pandas as pd
import numpy as np
from numpy import linalg
import rswjax
```

```{python}
np.random.seed(5)
n = 100
age = np.random.randint(20, 30, size=n) * 1.
sex = np.random.choice([0., 1.], p=[.4, .6], size=n)
height = np.random.normal(5, 1, size=n)

df = pd.DataFrame({
    "age": age,
    "sex": sex,
    "height": height
})

```

```{python}

# Real
print("\n\nExample 1, Max Entropy Weights")
funs = [
    lambda x: x.age,
    lambda x: x.sex == 0 if not np.isnan(x.sex) else np.nan,
    lambda x: x.height
]
losses = [rswjax.EqualityLoss(25), rswjax.EqualityLoss(.5),
          rswjax.EqualityLoss(5.3)]
regularizer = rswjax.EntropyRegularizer()
w, out, sol = rswjax.rsw(df, None, losses, regularizer, .1,  eps_abs=1e-8,verbose=True)

out
```

```{python}
import pandas as pd
import numpy as np
from numpy import linalg
import rswjax

np.random.seed(5)
n = 1000
age = np.random.randint(20, 30, size=n) * 1.
sex = np.random.choice([0., 1.], p=[.4, .6], size=n)
height = np.random.normal(5, 1, size=n)

df = pd.DataFrame({
    "age": age,
    "sex": sex,
    "height": height
})

funs = [
        lambda x: x.age,
        lambda x: x.sex == 0 if not np.isnan(x.sex) else np.nan,
        lambda x: x.height
    ]
    losses = [rswjax.LeastSquaresLoss(25), rswjax.LeastSquaresLoss(.5),
            rswjax.LeastSquaresLoss(5.3)]
    regularizer = rswjax.BooleanRegularizer(5)
    w, out, sol = rswjax.rsw(df, funs, losses, regularizer, 1., verbose=True)
    df["weight"] = w
```

```{python}
np.random.seed(5)
n = 1000
age = np.random.randint(20, 30, size=n) * 1.
sex = np.random.choice([0., 1.], p=[.4, .6], size=n)
height = np.random.normal(5, 1, size=n)

df = pd.DataFrame({
    "age": age,
    "sex": sex,
    "height": height
})


funs = [
        lambda x: x.age,
        lambda x: x.sex == 0 if not np.isnan(x.sex) else np.nan,
        lambda x: x.height
    ]
losses = [rswjax.LeastSquaresLoss(25), rswjax.LeastSquaresLoss(.5),
            rswjax.LeastSquaresLoss(5.3)]
regularizer = rswjax.BooleanRegularizer(5)
w, out, sol = rswjax.rsw(df, funs, losses, regularizer, 1., verbose=True)
    
df["weight"] = w

out
```

# Playing around with error checking

```{python}
import rswjax
import pandas as pd
import numpy as np
import jax

np.random.seed(5)
n = 1000
age = np.random.randint(20, 30, size=n) * 1.
sex = np.random.choice([0., 1.], p=[.4, .6], size=n)
height = np.random.normal(5, 1, size=n)

df = pd.DataFrame({
    "age": age,
    "sex": sex,
    "height": height
})

funs = [
    lambda x: x.age,
    lambda x: x.sex == 0 if not np.isnan(x.sex) else np.nan,
    lambda x: x.height
]
losses = [rswjax.EqualityLoss(25), rswjax.EqualityLoss(.5),
        rswjax.EqualityLoss(5.3)]
regularizer = rswjax.EntropyRegularizer()


w, out, sol = rswjax.rsw(df, None, losses, regularizer, .01,  eps_abs=1e-8,verbose=True)

out

```


```{python}
def max_pct_difference(list1, list2):
    # Convert lists to numpy arrays
    array1 = np.array(list1)
    array2 = np.array(list2)

    difference = np.abs(array1 - array2)

    with np.errstate(divide='ignore', invalid='ignore'):
        percent_difference = np.where(array1 != 0, (difference / array1) * 100, np.nan)

    max_percent_diff = np.nanmax(percent_difference)

    return max_percent_diff

max_pct_difference(out,[l.fdes for l in losses])
```